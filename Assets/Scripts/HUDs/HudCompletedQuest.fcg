import "Hud.fcc" as Hud
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "./HudFFQuestion.fcg" as HudFFQuestion

graph HudCompletedQuest {
    ROOM_1_NEED_SCORE = 20

    _CompletedQuestHUD entity<CustomUI>
    _ContentLabel entity<UIWidgetLabel>

    event OnPlayerCompletedQuest(player entity<Player>, roomQuest int) {
        if player == thisEntity {
            ShowCompletedQuestHUD(roomQuest as RoomQuest)
        }
    }

    func InitCompletedQuestHUD() {
        if _CompletedQuestHUD != nil {
            return
        }

        CreateCustomUI(out var completedQuestHud, thisEntity<Player>, EResUI.CompletedQuest)
        _CompletedQuestHUD = completedQuestHud

        var container entity<UIWidget> = GetChildByIndex(_CompletedQuestHUD, 0) as entity<UIWidget>
        var details entity<UIWidget> = GetChildByIndex(container, 2) as entity<UIWidget>
        _ContentLabel = GetChildByIndex(details, 0) as entity<UIWidgetLabel>
    }

    async func ShowCompletedQuestHUD(roomQuest RoomQuest) {
        LogInfo("[HudCompletedQuest] ShowCompletedQuestHUD(" + roomQuest + ")")

        InitCompletedQuestHUD()

        _CompletedQuestHUD<CustomUI>.IsVisible = true

        if roomQuest == RoomQuest.RoomQuest_1 {
            var score int = thisEntity<HudFFQuestion>.GetScore()
            if score >= ROOM_1_NEED_SCORE {
                _ContentLabel<UIWidgetLabel>.Content = LocString{"HUD_COMPLETED", {score}}
            } else {
                _ContentLabel<UIWidgetLabel>.Content = LocString{"HUD_NOT_COMPLETED", {score}}
            }

            WaitForMillisecond(3000)
        } else {
            for i = 5, -1, -1 {
                _ContentLabel<UIWidgetLabel>.Content = LocString{"HUD_TELEPORT", {i}}
                WaitForMillisecond(1000)
            }
        }

        HideCompletedQuestHUD()
    }

    func HideCompletedQuestHUD() {
        _CompletedQuestHUD<CustomUI>.IsVisible = false
    }
}