import "Hud.fcc" as Hud
import "List.fcc" as List
import "Math.fcc" as Math
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Configs/FreeFireQuestionConfigs.fcg" as FreeFireQuestionConfigs

graph HudFFQuestion {
    QUESTION_DURATION = 5000
    MAX_QUESTIONS = 5

    _TotalScore int
    _Questions List<int>
    _AnswerScores List<int>
    _IsAllowAnswer bool

    _FFQuestionHUD entity<CustomUI>
    _TitleLabel entity<UIWidgetLabel>
    _QuestionLabel entity<UIWidgetLabel>
    _AnswerButtons List<entity<UIWidgetButton>>
    _ScoreLabel entity<UIWidgetLabel>

    event OnAwake() {
        _TotalScore = 0
        _Questions = List<int>{}
        _AnswerScores = List<int>{1, 2, 3, 4, 5}
        _AnswerButtons = List<entity<UIWidgetButton>>{}
        _IsAllowAnswer = true
    }

    event OnPlayerSkipQuest(player entity<Player>, roomQuest int) {
        if player == thisEntity && roomQuest == RoomQuest.RoomQuest_1 {
            ResetMission()
        }
    }

    func InitFFQuestionHUD() {
        if _FFQuestionHUD != nil {
            return
        }

        CreateCustomUI(out var ffQuestionHud, thisEntity<Player>, EResUI.FreeFireQuestion)
        _FFQuestionHUD = ffQuestionHud

        var containerWidget entity<UIWidget> = GetChildByIndex(_FFQuestionHUD, 1) as entity<UIWidget>

        var titleWidget entity<UIWidget> = GetChildByIndex(containerWidget, 1) as entity<UIWidget>
        _TitleLabel = GetChildByIndex(titleWidget, 1) as entity<UIWidgetLabel>

        var detailsWidget entity<UIWidget> = GetChildByIndex(containerWidget, 2) as entity<UIWidget>
        _QuestionLabel = GetChildByIndex(detailsWidget, 0) as entity<UIWidgetLabel>

        var answersWidget entity<UIWidget> = GetChildByIndex(containerWidget, 3) as entity<UIWidget>
        _AnswerButtons = GetChildren(answersWidget) as List<entity<UIWidgetButton>>

        var scoreWidget entity<UIWidget> = GetChildByIndex(containerWidget, 4) as entity<UIWidget>
        _ScoreLabel = GetChildByIndex(scoreWidget, 0) as entity<UIWidgetLabel>

        HideQuestionHUD()
    }

    func ShowQuestionHUD() {
        LogInfo("[HudFFQuestion] ShowQuestionHUD()")

        InitFFQuestionHUD()
        UpdateQuestionHUD()

        _FFQuestionHUD<CustomUI>.IsVisible = true
    }

    func HideQuestionHUD() {
        _FFQuestionHUD<CustomUI>.IsVisible = false
    }

    func UpdateQuestionHUD() {
        CheckAnswerAllQuestions()
        ResetButtons()

        var allQuestions List<StringOrLocString> = FreeFireQuestionConfigs.GetAllQuestions()
        var questionIndex int = RandomInt(0, List.Length(allQuestions))

        while List.Contain(_Questions, questionIndex) {
            questionIndex = RandomInt(0, List.Length(allQuestions))
        }
        List.Append(_Questions, questionIndex)

        _TitleLabel<UIWidgetLabel>.Content = LocString{"HUD_FFQ_QUESTION", {List.Length(_Questions)}}

        _QuestionLabel<UIWidgetLabel>.Content = allQuestions[questionIndex]

        var answersList Map<int, StringOrLocString> = FreeFireQuestionConfigs.GetFFAnswers(questionIndex)
        List.Shuffle(_AnswerScores)

        var widgetIndex int = 0
        for key, score in _AnswerScores {
            var answerButton entity<UIWidgetButton> = _AnswerButtons[widgetIndex]
            var answerLabel entity<UIWidgetLabel> = GetChildByIndex(answerButton, 0) as entity<UIWidgetLabel>
            answerLabel<UIWidgetLabel>.Content = answersList[score]

            widgetIndex += 1
        }
    }

    func CheckAnswerAllQuestions() {
        if List.Length(_Questions) != MAX_QUESTIONS {
            return
        }

        DispatchEventWithPlatform(OnPlayerCompletedQuest, thisEntity, PlatformType.Both, List<object>{thisEntity, RoomQuest.RoomQuest_1})
        ResetMission()
    }

    func ResetMission() {
        HideQuestionHUD()

        _TotalScore = 0
        _Questions = List<int>{}
    }

    func ResetButtons() {
        for key, answerButton in _AnswerButtons {
            answerButton<UIWidgetButton>.Color = #FFFFFF

            var answerScoreLabel entity<UIWidgetLabel> = GetChildByIndex(answerButton, 1) as entity<UIWidgetLabel>
            answerScoreLabel<UIWidget>.Active = false
        }
    }

    async func HandlePlayerAnswer(answerIndex int) {
        if !_IsAllowAnswer {
            return
        }

        _IsAllowAnswer = false
        ShowAnswerScore(answerIndex)

        WaitForMillisecond(QUESTION_DURATION)

        UpdateQuestionHUD()
        _IsAllowAnswer = true
    }

    func ShowAnswerScore(answerIndex int) {
        var answerButton entity<UIWidgetButton> = _AnswerButtons[answerIndex]
        answerButton<UIWidgetButton>.Color = #30F410

        var answerScoreLabel entity<UIWidgetLabel> = GetChildByIndex(answerButton, 1) as entity<UIWidgetLabel>
        answerScoreLabel<UIWidgetLabel>.Content = "+" + _AnswerScores[answerIndex]
        answerScoreLabel<UIWidget>.Active = true

        _TotalScore += _AnswerScores[answerIndex]

        _ScoreLabel<UIWidgetLabel>.Content = LocString{"HUD_FFQ_SCORE", {_TotalScore}}

        // for key, answerButton in _AnswerButtons {
        //     var answerScoreLabel entity<UIWidgetLabel> = GetChildByIndex(answerButton, 1) as entity<UIWidgetLabel>
        //     answerScoreLabel<UIWidgetLabel>.Content = "+" + _AnswerScores[key]
        //     answerScoreLabel<UIWidget>.Active = true

        //     if key == answerIndex {
        //         _TotalScore += _AnswerScores[key]
        //     }
        // }
    }

    func GetScore() int {
        return _TotalScore
    }
}