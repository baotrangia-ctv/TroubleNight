import "Hud.fcc" as Hud
import "List.fcc" as List
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Configs/RoomConfigs.fcg" as RoomConfigs
import "Player.fcc" as Player

graph PlayerQuests {
    MAX_QUESTS = 4

    _CompletedQuests List<int>

    event OnAwake() {
        _CompletedQuests = List<int>{}
    }

    event OnPlayerCompletedQuest(player entity<Player>, roomQuest int) {
        if player == thisEntity && !List.Contain(_CompletedQuests, roomQuest) {
            LogInfo("[PlayerQuests] OnPlayerCompletedQuest(" + player<Player>.NickName + ", " + roomQuest + ")")

            List.Append(_CompletedQuests, roomQuest)

            CheckPlayerFinish()
        }
    }

    event OnPlayerFinished(player entity<Player>) {
        var result int = 2 // Lose
        if player == thisEntity {
            result = 1 // Win
            // Teleport user to hidden room
        }

        CreateBuiltInUI(out var resultBanner, thisEntity<Player>, BuiltInUIType.ResultBannerHud)
        resultBanner<UIWinOrLoseBanner>.Result = result
    }

    func CheckPlayerFinish() {
        if List.Length(_CompletedQuests) < MAX_QUESTS {
            return
        }

        for key, player in GetAllPlayers() {
            DispatchEventWithPlatform(OnPlayerFinished, player, PlatformType.Both, List<object>{thisEntity})
        }
    }

    func IsPassedQuest(roomQuest RoomQuest) bool {
        if List.Contain(_CompletedQuests, roomQuest) {
            return true
        }

        return false
    }

    func HandlePlayerAcceptQuest(roomQuest RoomQuest) {
        LogInfo("[PlayerQuests] HandlePlayerAcceptQuest(" + roomQuest + ")")

        if List.Contain(_CompletedQuests, roomQuest) {
            return
        }

        var spawnPosition Vector3 = RoomConfigs.GetRoomSpawnPosition(roomQuest)
        if roomQuest == RoomQuest.RoomQuest_2 {
            Teleport(thisEntity<Player>, spawnPosition, thisEntity<Player>.Forward)
        }

        start HandlePlayerCompletedQuest(roomQuest)
    }

    async func HandlePlayerCompletedQuest(roomQuest RoomQuest) {
        if roomQuest == RoomQuest.RoomQuest_2 {
            return
        }

        WaitForMillisecond(3000)
        DispatchEventWithPlatform(OnPlayerCompletedQuest, thisEntity, PlatformType.Both, List<object>{thisEntity, roomQuest})
    }
}