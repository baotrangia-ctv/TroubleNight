import "Hud.fcc" as Hud
import "List.fcc" as List
import "Player.fcc" as Player
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Configs/RoomConfigs.fcg" as RoomConfigs
import "../HUDs/HudFFQuestion.fcg" as HudFFQuestion

graph PlayerQuests {
    MAX_QUESTS = 4

    _CompletedQuests List<int>

    event OnAwake() {
        _CompletedQuests = List<int>{}
    }

    event OnPlayerCompletedQuest(player entity<Player>, roomQuest int) {
        if player == thisEntity && !List.Contain(_CompletedQuests, roomQuest) {
            HandlePlayerCompletedQuest(roomQuest as RoomQuest)
        }
    }

    // event OnPlayerFinished(player entity<Player>) {
    //     var result int = 2 // Lose
    //     if player == thisEntity {
    //         result = 1 // Win
    //         // Teleport user to hidden room
    //     }

    //     CreateBuiltInUI(out var resultBanner, thisEntity<Player>, BuiltInUIType.ResultBannerHud)
    //     resultBanner<UIWinOrLoseBanner>.Result = result
    // }

    async func HandlePlayerCompletedQuest(roomQuest RoomQuest) {
        LogInfo("[PlayerQuests] OnPlayerCompletedQuest(" + thisEntity<Player>.NickName + ", " + roomQuest + ")")

        if roomQuest == RoomQuest.RoomQuest_1 {
            var score int = thisEntity<HudFFQuestion>.GetScore()
            if score >= 20 {
                List.Append(_CompletedQuests, roomQuest)
            }
        } else {
            WaitForMillisecond(6000)

            var roomPosition Vector3 = RoomConfigs.GetRoomPosition(roomQuest)
            Teleport(thisEntity<Player>, roomPosition, thisEntity<Player>.Forward)

            List.Append(_CompletedQuests, roomQuest)
        }

        CheckPlayerCompletedAllQuests()
    }

    func CheckPlayerCompletedAllQuests() {
        if List.Length(_CompletedQuests) < MAX_QUESTS {
            return
        }

        var hiddenRoomPosition Vector3 = RoomConfigs.GetRoomSpawnPosition(RoomQuest.HiddenRoom)
        Teleport(thisEntity<Player>, hiddenRoomPosition, thisEntity<Player>.Forward)

        // for key, player in GetAllPlayers() {
        //     DispatchEventWithPlatform(OnPlayerFinished, player, PlatformType.Both, List<object>{thisEntity})
        // }
    }

    func IsPassedQuest(roomQuest RoomQuest) bool {
        if List.Contain(_CompletedQuests, roomQuest) {
            return true
        }

        return false
    }

    func HandlePlayerAcceptQuest(roomQuest RoomQuest) {
        LogInfo("[PlayerQuests] HandlePlayerAcceptQuest(" + roomQuest + ")")

        if List.Contain(_CompletedQuests, roomQuest) {
            return
        }

        var spawnPosition Vector3 = RoomConfigs.GetRoomSpawnPosition(roomQuest)
        if roomQuest == RoomQuest.RoomQuest_1 {
            thisEntity<HudFFQuestion>.ShowQuestionHUD()
        } else if roomQuest == RoomQuest.RoomQuest_2 {
            Teleport(thisEntity<Player>, spawnPosition, thisEntity<Player>.Forward)
        } else if roomQuest == RoomQuest.RoomQuest_3 {
            Teleport(thisEntity<Player>, spawnPosition, thisEntity<Player>.Forward)
        } else if roomQuest == RoomQuest.RoomQuest_4 {
            // Temp
            var hiddenRoomPosition Vector3 = RoomConfigs.GetRoomSpawnPosition(RoomQuest.HiddenRoom)
            Teleport(thisEntity<Player>, hiddenRoomPosition, thisEntity<Player>.Forward)
        } else {}

        DispatchEventWithPlatform(OnPlayerStartQuest, thisEntity, PlatformType.Both, List<object>{thisEntity, roomQuest})
    }
}